programa
{
	
 	inclua biblioteca Util --> u
	inclua biblioteca Calendario --> calen
	inclua biblioteca Tipos

//VARIÁVEIS E MATRIZES GLOBAIS
	
  	inteiro opcao, nota, codigo, cadastros[9], cl, qntLivro, quant_livros[2]
  	cadeia dado[10][3], CadLiv[10][3], emp[10][2], dev[10][2]
 	inteiro tempo_i = 1, tempo_f = 2, q_emp[2], q_dev[2]
  	logico achou = falso
  	inteiro hora_atual, entrada_h, entrada_m, entrada_s, dev_h, dev_m, dev_s, minuto_atual, segundo_atual
  	inteiro entrada_mes, somaa, entrada_data, soma, somaMes, dev_mes=0, dev_data=0, dev_atraso[2]


  	cadeia livros[][] = {{"Titulo                                 ","Setor         ","Autor           ","ID"}, 
		        		 {"Contabilidade básica fácil             ","657           ","Osni            ","01"},
	                     {"Gerenciamento de projetos              ","658           ","Paul            ","02"},
	                     {"Gestão de projetos                     ","658           ","Campbell        ","03"},
	                     {"Administração de estratégica           ","658           ","Hitt            ","04"},
	                     {"Gestão Estratégica                     ","658-3         ","Mascarenhas     ","05"},
	                     {"Administração da produção              ","658-5         ","Nigel           ","06"},
	                     {"Gestão de estoque                      ","658-7         ","Ferreira        ","07"},
	                     {"Comportamento do cliente               ","658-8         ","Jagdish         ","08"},
	                     {"Instrumentação e controle              ","681-2         ","Bolton          ","09"},
	                     {"Mecatrônica                            ","681-5         ","Cetinkunt       ","10"},
                          {"Manual de encanador                    ","669           ","Ghizze          ","11"},
	                     {"Desenho técnico moderno                ","744           ","Arlindo         ","12"},
	                     {"Sistemas embarcados                    ","001.8         ","Schneider       ","13"},
	                     {"Fundamentos da metodologia             ","004           ","Marconi         ","14"},
	                     {"Segurança da informação                ","004           ","Nicolau         ","15"},
	                     {"Hardware na prática                    ","004.2         ","Vasconcelos     ","16"},
	                     {"Lógica e design da programação         ","004           ","Farrell         ","17"},
	                     {"Compiladores                           ","004.43        ","Aho             ","18"},
	                     {"Sistemas operacionais                  ","004           ","Deitel          ","19"},
	                     {"Top down                               ","004           ","Oppenheiner     ","20"},
	                     {"Ergonomia prática                      ","331.47        ","Bernard         ","21"},
	                     {"Ética                                  ","159-9         ","Emilio          ","22"},
	                     {"Princípios de economia                 ","338           ","Nogami          ","23"},
	                     {"A biblioteca digital                   ","025.4         ","Ana             ","24"},
	                     {"Bioética                               ","502           ","Kottow          ","25"},
	                     {"Algebra linear                         ","51            ","Chris           ","26"},
	                     {"Fisica 1                               ","53            ","Fernando        ","27"},
	                     {"Química geral                          ","54            ","Russel          ","28"},
	                     {"Fundamentos da geologia                ","551           ","Wincader        ","29"},
	                     {"Fundamentos da ecologia                ","573           ","Eugene          ","30"},
	                     {"Mecânica geral                         ","62.7          ","Matsumura       ","31"},
	                     {"Tecnologia mecânica                    ","620.1         ","Chiaverini      ","32"},
	                     {"Energias renováveis                    ","621           ","Rodnei          ","33"},
	                     {"Metalografia                           ","621.1         ","Colpaert        ","34"},
	                     {"Materiais                              ","621-3         ","Walfredo        ","35"},
                          {"Analise de circuitos em \nengenharia                             ","621.3.049     ","Irwin           ","36"},
                          {"Manual do montador elétrico            ","629.39        ","José            ","37"},
                          {"Instalações elétrica                   ","621.316.17    ","Cotrim          ","38"},
                          {"Eletrônica                             ","621.38        ","Malvino         ","39"},
                          {"Motores de explosão e diesel           ","621.43        ","Sarmiento       ","40"},
                          {"Mecânica das bombas                    ","621.11        ","Pio             ","41"},
                          {"Máquinas                               ","621.7         ","Casillas        ","42"},
                          {"Manutenção preditiva                   ","621.8         ","Adyles          ","43"},
                          {"Manutenção do ferramenteiro            ","621.9         ","Konick          ","44"},
                          {"Manutenção hidráulica                  ","626           ","Azevedo         ","45"},
                          {"Organização do ambiente de \ntrabalho                               ","629.02        ","Senai Departamento Nacional","46"},
                          {"Sistemas de transmissão mecânica       ","629.3         ","Senai Departamento Regional","47"},
                          {"Sistemas de Bicas                      ","629.331       ","Senai Departamento Nacional","48"},
                          {"Fundamentos tecnológica automotiva     ","629.331       ","Senai Departamento Nacional","49"},
                          {"Manutenção de sistemas eletrônicos \nde motocicletas                        ","629.326       ","Serviço de Nacional de Aprendizagem","50"},
                          {"Organização dos ambientes              ","629.015       ","Senai Departamento Nacional","51"},
                          {"Sinalização e iluminação               ","629.331       ","Senai Departamento Nacional","52"},
                          {"Fundamentos dos sistemas eletrônicos \nautomotivos                            ","629.3.664     ","Sistema Nacional de Aprendizagem","53"},
                          {"Nefertite                              ","821           ","Jacqueline","54"},
                          {"Frankstein                             ","821.1         ","Shelley","55"}}





//MENU INICIAL

	funcao inicio()
	{	
		inteiro menu, r_menu
		
	
		escreva("         BIBLIOTECA         \n")
		escreva("____________________________\n\n")
		escreva("1- Cadastro                 \n")
		escreva("2- Login                    \n")
		escreva("3- Empréstimo               \n")
		escreva("4- Devolução                \n")
		escreva("5- Relatórios               \n")
		escreva("6- Pesquisa                 \n")
		escreva("7- Catálogo                 \n")
		escreva("8- Cadastro de livro        \n")
		escreva("9- Sair                     \n")
		escreva("____________________________\n")
		escreva("\nDigite a opção desejada: ")
		leia(menu)
		limpa()

		escolha (menu){
			
			caso 1:
			cadastroUsuario()
			pare

			caso 2:
			login()
			pare

			caso 3:
			emprestimo()
			pare

			caso 4:
			devolucao()
			pare

			caso 5:
			relatorios()
			pare

			caso 6:
			pesquisa()
			pare

			caso 7:
			catalogo()
			pare

			caso 8:
			cadastroLivro()
			pare

			caso 9:
			escreva("Até a próxima!\n")
			pare

			caso contrario:
			voltarMenu()
			pare
		}
		
	}

//CADASTRO (CASO 1)

	funcao cadastroUsuario() {

		cadeia dados
		
		se (cadastros[0] == 0){
			escreva("Quantos cadastros deseja fazer? ")
		leia(cadastros[0])
		limpa()
		para (inteiro l = 1; l < cadastros[0]+1; l++) {
		
		escreva ("Nome completo: ")
		leia (dado[l][0])
		escreva ("Nome de usuário: ")
		leia (dado[l][1])
		escreva ("Senha: ")
		leia (dado[l][2])
		}
		limpa()
		para (inteiro l = 1; l < cadastros[0]+1; l++) {
		escreva ("Verifique seus dados: ")
		escreva ("\nNome completo: "+dado[l][0]) 
		escreva ("\nNome de usuário: "+dado[l][1])
		escreva ("\nSenha: "+dado[l][2])
		}
		escreva ("\nSeus dados estão corretos (S/N)? ")
		leia (dados)
		limpa()
		

		se (dados == "S" ou dados == "s") {
			escreva("Deseja fazer um novo cadastro ou ir ao login?\n1- Cadastro\n2- Login\nDigite a opção desejada: ")
			leia(cl)
			se(cl == 1){
				enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
		limpa()
				cadastroUsuario()
			}
			senao {
				escreva ("Direcionando ao login... ")
			
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
		limpa()
		login()
		}	
		}
		
		senao se (dados == "N" ou dados == "n") {
			escreva ("Voltando ao início do cadastro... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
			limpa()
			cadastroUsuario()
		}

		senao {
			escreva ("Opção inválida! Voltando ao início... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
			limpa()
			cadastroUsuario()
		}
		
		}

		senao se (cadastros[0] != 0) {
			escreva("Quantos cadastros deseja fazer? ")
		     leia(cadastros[1])
		
		para (inteiro l = cadastros[0]+1; l <= cadastros[0] + cadastros[1]; l++) {
		
		escreva ("Nome completo: ")
		leia (dado[l][0])
		escreva ("Nome de usuário: ")
		leia (dado[l][1])
		escreva ("Senha: ")
		leia (dado[l][2])
		}
		limpa()
		para (inteiro l = cadastros[0]+1; l <= cadastros[0] + cadastros[1]; l++) {
		escreva ("Verifique seus dados: ")
		escreva ("\nNome completo: "+dado[l][0]) 
		escreva ("\nNome de usuário: "+dado[l][1])
		escreva ("\nSenha: "+dado[l][2])
		}
		escreva ("\nSeus dados estão corretos (S/N)? ")
		leia (dados)
		

		se (dados == "S" ou dados == "s") {
			escreva ("Direcionando ao login... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
		limpa()
		login()
		}	
		
		
		senao se (dados == "N" ou dados == "n") {
			escreva ("Voltando ao início do cadastro... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
			limpa()
			cadastroUsuario()
		}

		senao {
			escreva ("Opção inválida! Voltando ao início... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
			limpa()
			cadastroUsuario()
		}
		
		}

		senao {
			escreva ("Houve um erro, entre em contato com o desenvolvedor.")
		}
		
	}

//LOGIN (CASO 2)
	
	funcao login() {
		
		cadeia senhaUsuario, nomeUsuario, reiniciar
		inteiro v_cadastro
		
		se (cadastros[0] == 0){
			escreva("Você ainda não possui cadastro, deseja fazer um?\n1-Sim\n2-Não\nDigite a opção desejada: ")
			leia(v_cadastro)
			se (v_cadastro == 1){
				limpa()
				cadastroUsuario()
			}
			senao se (v_cadastro == 2){
				limpa()
				inicio()
			}
			senao {
				escreva ("Opção inválida! Voltando ao início... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
			limpa()
			cadastroUsuario()
		}
		
			}

			senao {
		escreva("____________________________\n\n")
		escreva("           LOGIN            \n")
		escreva("____________________________\n\n")
		escreva("NOME DE USUÁRIO: ")
		leia (nomeUsuario)
		escreva ("SENHA: ")
		leia (senhaUsuario)
		limpa()

		para (inteiro l = 1; l < 10; l++) {
			se (dado[l][1] == nomeUsuario){
				se(dado[l][2] == senhaUsuario){
					escreva ("Login efetuado!\n")	
			
			
				achou = verdadeiro  
				enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}}
				}
			}
			voltarMenu()
			
		
		se (nao achou) 
		{
			escreva ("Usuário ou senha inválidos!\n")
			escreva ("Tentar novamente (S/N)? ")
			leia (reiniciar)
			limpa()
			se (reiniciar == "S") {
			escreva ("Redirecionando ao login... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
		limpa()
		login()
		}
		senao se (reiniciar == "N") {
			
			escreva ("Até a próxima!\n")
		}

		senao {
			escreva ("Opção inválida! Voltando ao início... ")
			enquanto (tempo_i<=tempo_f) {
			escreva (tempo_i," ")
			u.aguarde(1000)
			tempo_i++
		}
		limpa()
		inicio()
		}
		}
		}
	}

// EMPRÉSTIMO E PRAZO (CASO 3)

	funcao emprestimo(){
		
		
		se (q_emp[0] == 0){
		escreva("Quantos livros serão emprestados? ")
		leia(q_emp[0])
		limpa()
		para(inteiro i = 0; i <q_emp[0]; i++){
		escreva ("Insira o nome do aluno: ")
		leia (emp[i][0])
		escreva("Insira o nome do livro: ")
		leia (emp[i][1])
		limpa()
		entrada_h = calen.hora_atual(falso)
		entrada_m = calen.minuto_atual()
		entrada_s = calen.segundo_atual()
		entrada_data = calen.dia_mes_atual()
		entrada_mes = calen.mes_atual()
		escreva("____________________________________\n\n")
		escreva (emp[i][0], " ENTRADA ", entrada_h,":", entrada_m,":", entrada_s, " DATA: " , entrada_data , "/" , entrada_mes)
		escreva("\n")
		entregaLivro ()}
		voltarEmp()
		}
		senao se (q_emp[0] != 0){
		escreva("Quantos livros serão emprestados? ")
		leia(q_emp[1])
		limpa()
		para(inteiro i = q_emp[0]; i <q_emp[0] + q_emp[1]; i++){
		escreva ("Insira o nome do aluno: ")
		leia (emp[i][0])
		escreva("Insira o nome do livro: ")
		leia (emp[i][1])
		limpa()
		entrada_h = calen.hora_atual(falso)
		entrada_m = calen.minuto_atual()
		entrada_s = calen.segundo_atual()
		entrada_data = calen.dia_mes_atual()
		entrada_mes = calen.mes_atual()
		escreva("____________________________________\n\n")
		escreva (emp[i][0], " ENTRADA ", entrada_h,":", entrada_m,":", entrada_s, " DATA: " , entrada_data , "/" , entrada_mes)
		escreva("\n")
		entregaLivro ()}
		voltarMenu()
		}
		
		senao {
			voltarEmp()
		}
		}

	funcao entregaLivro(){

			soma = entrada_data + 15
			se (soma > 30){
				somaa = soma-30
				somaMes = entrada_mes+1
				escreva("O prazo de entrega é até " , somaa, "/", somaMes,"\n")
				escreva("____________________________________\n\n")
	
			}

			senao{
				escreva("O prazo de entrega é até " , soma, "/", entrada_mes,"\n")
				escreva("____________________________________\n\n")
			}
	}


//DEVOLUÇÃO (CASO 4)

	funcao devolucao(){
		cadeia aluno
		
		se (q_dev[0] == 0){
		escreva("Quantos livros serão devolvidos? ")
		leia(q_dev[0])
		limpa()
		para(inteiro i = 0; i <q_dev[0]; i++){
		escreva ("Insira o nome do aluno: ")
		leia (dev[i][0])
		escreva("Insira o nome do livro: ")
		leia (dev[i][1])
		limpa()
		dev_h = calen.hora_atual(falso)
		dev_m = calen.minuto_atual()
		dev_s = calen.segundo_atual()
		dev_data = calen.dia_mes_atual()
		dev_mes = calen.mes_atual()
		escreva("____________________________________\n\n")
		escreva (dev[i][0], " DEVOLUÇAO ", dev_h,":", dev_m,":", dev_s , " DATA: ", dev_data , "/" , dev_mes)
		escreva("\n")
	     atraso()}
	     voltarDev()
		}	
		senao se (q_dev[0] != 0){
		escreva("Quantos livros serão devolvidos? ")
		leia(q_dev[1])
		limpa()
		para(inteiro i = q_dev[0]; i <q_dev[0] + q_dev[1]; i++){
		escreva ("Insira o nome do aluno: ")
		leia (dev[i][0])
		escreva("Insira o nome do livro: ")
		leia (dev[i][1])
		limpa()
		dev_h = calen.hora_atual(falso)
		dev_m = calen.minuto_atual()
		dev_s = calen.segundo_atual()
		dev_data = calen.dia_mes_atual()
		dev_mes = calen.mes_atual()
		escreva("____________________________________\n\n")
		escreva (dev[i][0], " DEVOLUÇÃO ", dev_h,":", dev_m,":", dev_s , " DATA: ", dev_data , "/" , dev_mes)
		escreva("\n")
	     atraso()}
	     voltarMenu()	
		}
		senao {
			voltarDev()
		}
		}
	
	funcao atraso(){
		se(somaa == 0){
			se (dev_data >= soma e dev_mes >= entrada_mes){
			escreva("____________________________________\n\n")
			escreva("Entrega fora do prazo.") 
			escreva("\n____________________________________\n\n")
			para (inteiro i = 0; i <1; i++){
				dev_atraso[i] = dev_atraso[i] + 1
			}
				}

		senao {
			escreva("____________________________________\n\n")
			escreva("Entrega dentro do prazo.")
			escreva("\n____________________________________\n\n")
				}
		}
		senao {
		se (dev_data >= somaa e dev_mes >= somaMes){
			escreva("____________________________________\n\n")
			escreva("Entrega fora do prazo.") 
			escreva("\n____________________________________\n\n")
			para (inteiro i = 0; i <1; i++){
				dev_atraso[i] = dev_atraso[i] + 1
			}
				}
		senao {
			escreva("____________________________________\n\n")
			escreva("Entrega dentro do prazo.")
			escreva("\n____________________________________\n\n")
				}
				}
	}


//RELATÓRIOS (CASO 5)

	funcao relatorios(){

		inteiro menu_r
		
		escreva("\t\tRELATÓRIOS\n")
		escreva("______________________________________________\n\n")
		escreva("1- Relatório de livros disponíveis\n")
		escreva("2- Relatório de livros emprestados e em atraso\n")
		escreva("3- Relatório de alunos cadastrados\n")
		escreva("4- Retornar\n")
		escreva("5- Sair\n")
		escreva("______________________________________________\n\n")
		escreva("Digite a opção desejada: ")
		leia(menu_r)
		limpa()

		escolha (menu_r){

			caso 1:
			totalLivros()
			pare

			caso 2:
			escreva("Livros em atraso: "+dev_atraso[0])
			naoEntregue()
			escreva("\n")
			livEmprestados()
			escreva("\n")
			qntDevolvido()
			voltarRelatorio()
			pare

			caso 3:
			totalCadastro()
			voltarRelatorio()
			pare

			caso 4:
			inicio()
			pare

			caso 5 :
			finalizar()
			pare

			caso contrario:
			escreva("Opção inválida.\n")
			pare
			
		}
		
	}

	funcao relatorioDisp(){
		totalLivros()
	}

	funcao totalLivros(){

			inteiro l, c, total_livros, total_disp
			 
			 
			 para (l = 1; l <= 55; l++){
			 
			qntLivro = Tipos.cadeia_para_inteiro(livros[l][3], 10)
				}
			total_livros = qntLivro + quant_livros[0] + quant_livros[1]
			total_disp = (total_livros + q_dev[0] + q_dev[1]) - (q_emp[0] + q_emp[1])
			escreva("Total de livros: ", total_livros)
			escreva("\nTotal de livros disponíveis: ", total_disp)
		     voltarRelatorio()
	}

funcao totalCadastro(){

		escreva("O total de alunos cadastrados foi de: ", cadastros[0]+cadastros[1])

		
	}

	funcao naoEntregue(){

		inteiro n_entregue
		
		n_entregue = (q_emp[0]+q_emp[1]) - (q_dev[0]+q_dev[1])
		escreva("Quantidade de livros nao entregue foi de: ", n_entregue)

		
		
	}
	funcao livEmprestados(){

		inteiro l_emp
		
		l_emp = (q_emp[0]+q_emp[1]) 
		escreva("Quantidade de livros emprestados foi de: " , l_emp)

		
	}

	funcao qntDevolvido(){
	
	inteiro qntdevol
	
	qntdevol = (q_dev[0]+q_dev[1])
	escreva("Quantidade de livros devolvidos foi de: " , qntdevol)	
	}


//PESQUISA (CASO 6)

 funcao codigoBarras() {
		escreva("\t\t    LISTA DE CÓDIGOS")
		escreva("\n---------------------------------------------------------\n") 
		escreva("Livros de Gestão                    0000001 até 2000000\n")
		escreva("Livros de Automação Industrial      2000001 até 3000000\n")
		escreva("Livros de Tecnologia da Informação  3000001 até 4000000\n")
		escreva("Livros de Matemática                4000001 até 5500000\n")
		escreva("Livros de Mecânica                  5500001 até 6250000\n")
		escreva("Livros de Elétrica                  6250001 até 7500000\n")
		escreva("---------------------------------------------------------\n")
	}
funcao pesquisa() {
		
		escreva("Insira o código de barras do livro (7 dígitos): ")
		leia(codigo)
		limpa()

		se (codigo >= 0000001 e codigo <= 2000000){
			LocalizarCodigoGestao()
		}
		senao se (codigo >= 2000001 e codigo <= 3000000){
			LocalizarCodigoAutomacao()
		}
		senao se (codigo >=3000001 e codigo <= 4000000){
			LocalizarCodigoTI()
		}
		senao se (codigo >=4000001 e codigo <= 5500000){
			LocalizarCodigoMatematica()
		}
		senao se (codigo >=5500001 e codigo <= 6250000){
			LocalizarCodigoMecanica()
		}
		senao se (codigo >=6250001 e codigo <= 7500000){
			LocalizarCodigoEletrica()
		}
		senao {
			escreva("Código inválido!\n")
		}
}


	funcao LocalizarCodigoGestao() {

          cadeia gestao[][] = {{"Matérias","setores"},{"Contabilidade","657"},{"Gerenciamento de P.","658"},{"Empreendorismo","658"},{"Rotinas Admi.","658"},{"Gestão de Pessoas","658-3"},{"Gestão de Produção","658-5"},{"Gestão de Estoque","658-7"},{"Marketing","658-8"}}
		
		
		se (codigo <= 0250000){
		escreva("Livro de ", gestao[1][0]," \ndisponível na sessão ",gestao[1][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 0250001 e codigo <=0500000){
		escreva("Livro de ", gestao[2][0]," \ndisponível na sessão ",gestao[2][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 0500001 e codigo <=0750000){
		escreva("Livro de ", gestao[3][0]," \ndisponível na sessão ",gestao[3][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 0750001 e codigo <=1000000){
		escreva("Livro de ", gestao[4][0]," \ndisponível na sessão ",gestao[4][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 1000001 e codigo <=1250000){
		escreva("Livro de ", gestao[5][0]," \ndisponível na sessão ",gestao[5][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 1250001 e codigo <=1500000){
		escreva("Livro de ", gestao[6][0]," \ndisponível na sessão ",gestao[6][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 1500001 e codigo <=1750000){
		escreva("Livro de ", gestao[7][0]," \ndisponível na sessão ",gestao[7][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 1750001 e codigo <=2000000){
		escreva("Livro de ", gestao[8][0]," \ndisponível na sessão ",gestao[8][1], ".\n")
		voltaPesquisa()
		}
	}


	funcao LocalizarCodigoAutomacao() {
		
	     cadeia Automacao[][] = {{"Matérias","Setores"},{"Instrumentação","681-2"},{"Automação e Controle","681-5"},{"Construção Civil","669"},{"Desenho Técnico","744"}}
	
		
		se (codigo >= 2000001 e codigo <=2250000){
          escreva("Livro de ", Automacao[1][0]," \ndisponível na sessão ",Automacao[1][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 2250001 e codigo <=2500000){
          escreva("Livro de ",Automacao[2][0]," \ndisponível na sessão ", Automacao[2][1],".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 2500001 e codigo <=2750000){
          escreva("Livro de ",Automacao[3][0]," \ndisponível na sessão ",Automacao [3][1],".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 2750001 e codigo <=3000000){
	     escreva("Livro de ",Automacao[4][0]," \ndisponível na sessão ",Automacao [4][1],".\n")
		voltaPesquisa()
		}
	}

	funcao LocalizarCodigoTI() {
		
	     cadeia TI[][] = {{"Matérias","Setores"},{"Arquitetura Computa.","004-2"},{"Hardware","004-3"},{"Linguagem Progamação","004-43"},{"Redes computadores","004-7"}}
	
		se (codigo >= 3000001 e codigo <=3250000){
		escreva("Livro de ", TI[1][0]," \ndisponível na sessão ",TI[1][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 3250001 e codigo <=3500000){
		escreva("Livro de ", TI[2][0]," \ndisponível na sessão ",TI[2][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 3500001 e codigo <=3750000){
		escreva("Livro de ", TI[3][0]," \ndisponível na sessão ",TI[3][1], ".\n")	
		voltaPesquisa()
		}
		senao se (codigo >= 3750001 e codigo <=4000000){
	     escreva("Livro de ", TI[4][0]," \ndisponível na sessão ",TI[4][1], ".\n")
		voltaPesquisa()	
		}
	}

	funcao LocalizarCodigoMatematica() {

	     cadeia Matematica[][] = {{"Matérias","Setores"},{"Matemática","51"},{"Física","53"},{"Química","54"},{"Geologia","551"},{"Biologia","573"}}
		
		se (codigo >= 4000001 e codigo <=4250000){
             escreva("Livro de ",Matematica[1][0]," \ndisponível na sessão ",Matematica[1][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 4250001 e codigo <=4500000){
		escreva("Livro de ", Matematica[2][0]," \ndisponível na sessão ",Matematica[2][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 4500001 e codigo <=4750000){
		escreva("Livro de ",Matematica[3][0]," \ndisponível na sessão ",Matematica[3][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 4750001 e codigo <=5000000){
		escreva("Livro de ", Matematica[4][0]," \ndisponível na sessão ",Matematica[4][1], ".\n")
		voltaPesquisa()	
		}
		senao se (codigo >= 5000001 e codigo <=5500000){
          escreva("Livro de ", Matematica[5][0]," \ndisponível na sessão ",Matematica[5][1], ".\n")
		voltaPesquisa()
		}
		
	}

	funcao LocalizarCodigoMecanica() {
	   
	     cadeia Mecanica[][] = {{"Matérias","Setores"},{"Mecânica Materiais","620-1"},{"Engenharia Mecânica","621"},{"Máquinas Térmicas","551"}}
		
		
		se (codigo >= 5500001 e codigo <=5750000){
		escreva("Livro de ",  Mecanica[1][0]," \ndisponível na sessão ", Mecanica[1][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 5750001 e codigo <=6000000){
		escreva("Livro de ",  Mecanica[2][0]," \ndisponível na sessão ", Mecanica[2][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 6200001 e codigo <=6250000){
		escreva("Livro de ",  Mecanica[3][0]," \ndisponível na sessão ", Mecanica[3][1], ".\n")
		voltaPesquisa()
		}
	}

	funcao LocalizarCodigoEletrica() {
		
		 cadeia Eletrica[][] = {{"Matérias","Setores"},{"Engenharia","621-3"},{"Circuitos Elétricos","621-3-049"},{"Medição Elétrica","621-31"},{"Instalação Elétrica","621-316-17"},{"Dispotivo Eletrônico","621-38"}}	
		
		
		se (codigo >= 6250001 e codigo <=6500000){
		escreva("Livro de ", Eletrica[1][0]," \ndisponível na sessão ",Eletrica[1][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 6500001 e codigo <=6750000){
		escreva("Livro de ", Eletrica[2][0]," \ndisponível na sessão ",Eletrica[2][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 6750001 e codigo <=7000000){
		escreva("Livro de ", Eletrica[3][0]," \ndisponível na sessão ",Eletrica[3][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 7000001 e codigo <=7250000){
		escreva("Livro de ", Eletrica[4][0]," \ndisponível na sessão ",Eletrica[4][1], ".\n")
		voltaPesquisa()
		}
		senao se (codigo >= 7250001 e codigo <=7500000){
          escreva("Livro de ", Eletrica[5][0]," \ndisponível na sessão ",Eletrica[5][1], ".\n")
		voltaPesquisa()
		}
	}



//CATÁLOGO (CASO 7)

	
	funcao catalogo() {
	inteiro cat
	
	escreva("1- Livros\n")
	escreva("2- Seções\n")
	escreva("Digite a opção desejada: ")
	leia (cat)
	limpa()

	escolha (cat){
		caso 1:
		para (inteiro l= 0; l< 56; l++){
			para (inteiro c= 0; c< 3; c++){
				escreva(livros[l][c])
			}
			escreva("\n")
		}
		escreva("\n")
		voltarMenu()
		pare

		caso 2:
		
	Gestao()
	automacaoindustrial()
	ti()
	matematica()
	mecanica()
	eletrica()
	literatura()
	automotiva()
	escreva("\n")
	voltarMenu()
		pare

		caso contrario:
		pare
	}
	
}

	
	
	funcao Gestao()
	     {
	     	
	    cadeia matriz[][] = {{"Matérias\t\t\t","Setores"},{"Contabilidade\t\t\t","657"},{"Gerenciamento de P.\t\t","658"},{"Empreendorismo\t\t\t","658"},{"Rotinas Admi.\t\t\t","658"},{"Gestão de Pessoas\t\t","658-3"},{"Gestão de Produção\t\t","658-5"},{"Gestão de Estoque\t\t","658-7"},{"Marketing\t\t\t","658-8"}}
		
		escreva ("---------------------------------------\n")
		escreva ("                Gestão                 \n")
		escreva ("---------------------------------------\n")
	  
		para (inteiro l = 0; l <= 8; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }
	     
	     funcao automacaoindustrial()
	     {
	    cadeia matriz[][] = {{"Matérias\t\t\t","Setores"},{"Instrumentação\t\t\t","681-2"},{"Automação e Controle\t\t","681-5"},{"Construção Civil\t\t","669"},{"Desenho Técnico\t\t\t","744"}}
		
		escreva ("---------------------------------------\n")
		escreva ("          Automação Industrial         \n")
		escreva ("---------------------------------------\n")
        
        	para (inteiro l = 0; l <= 4; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }
		    
	     funcao ti()
	     {
	    cadeia matriz[][] = {{"Matérias\t\t\t","Setores"},{"Metodologia\t\t\t","001-8"},{"Informática\t\t\t","004"},{"Qualidade do sistema\ne do software\t\t\t","004-056"},{"Arquitetura Computa.\t\t","004-2"},{"Hardware\t\t\t","004-3"},{"Linguagem Progamação\t\t","004-43"},{"Interface\t\t\t","004-451"},{"Redes computadores\t\t","004-7"}}
	
		
		escreva ("---------------------------------------\n")
		escreva ("        Tecnologia da Informação       \n")
		escreva ("---------------------------------------\n")
	        
	    	para (inteiro l = 0; l <= 8; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }
		    
	     funcao matematica()
	     {
	    cadeia matriz[][] = {{"Matérias\t\t\t","Setores"},{"Matemática\t\t\t","51"},{"Física\t\t\t\t","53"},{"Química\t\t\t\t","54"},{"Geologia\t\t\t","551"},{"Biologia\t\t\t","573"}}
	
		
		escreva ("---------------------------------------\n")
		escreva ("               Matemática              \n")
		escreva ("---------------------------------------\n")
	
	    	para (inteiro l = 0; l <= 5; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }
		    
	     funcao mecanica()
	     {
	    cadeia matriz[][] = {{"Matérias\t\t\t","Setores"},{"Mecânica Materiais\t\t","620-1"},{"Mecânica\t\t\t","620-7"},{"Engenharia Mecânica\t\t","621"},{"Máquinas Térmicas\t\t","551"}}
	
		escreva ("---------------------------------------\n")
		escreva ("                Mecânica               \n")
		escreva ("---------------------------------------\n")
	        
	        para (inteiro l = 0; l <= 4; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }
		    
	     funcao eletrica()
	     {
	    cadeia matriz[][] =  {{"Matérias\t\t\t","Setores"},{"Engenharia\t\t\t","621-3"},{"Circuitos Elétricos\t\t","621-3-049"},
	    {"Medição Elétrica\t\t","621-31"},{"Instalação Elétrica\t\t","621-316-17"},{"Dispotivo Eletrônico\t\t","621-38"},
	    {"Motores de comb.\t\t","621-43"},{"Compressores\t\t\t","621-51"},{"Tec. mecânica\t\t\t","621-7"},
	    {"Elementos de maq.\t\t","621-8"},{"Usinagem\t\t\t","621-99"}, {"Hidráulica\t\t\t", "626"}}
		
		
		escreva ("---------------------------------------\n")
		escreva ("                Elétrica               \n")
		escreva ("---------------------------------------\n")
		
		    para (inteiro l = 0; l <= 11; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }

	     funcao literatura()
	     {
	    cadeia matriz[][] =  {{"Matérias\t\t\t","Setores"},{"Lit. Estrangeira\t\t","821"},{"Lit. Brasileira\t\t\t","821"}}
		
		
		escreva ("---------------------------------------\n")
		escreva ("              Literatura               \n")
		escreva ("---------------------------------------\n")
		
		    para (inteiro l = 0; l <= 2; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }

	     funcao automotiva()
	     {
	    cadeia matriz[][] =  {{"Matérias\t\t\t","Setores"},{"Prep. de tintas\t\t\t","629.02"},{"Prep. de pintura\t\t","629.331"}}
		
		
		escreva ("---------------------------------------\n")
		escreva ("              Automotiva               \n")
		escreva ("---------------------------------------\n")
		
		    para (inteiro l = 0; l <= 2; l++)
		{
		    para (inteiro c = 0; c < 2; c++)
		{
			escreva (matriz[l][c])
		}
		escreva("\n")
	     }
	     }
// CADASTRO DE LIVROS (CASO 8)

	funcao cadastroLivro(){
		
		se (quant_livros[0] == 0){
		escreva("Insira quantidade de livros: ")
		leia(quant_livros[0])
		limpa()
		
		escreva("____________________________\n\n")
		escreva("     CADASTRO DE LIVROS      \n")
		escreva("____________________________\n\n")

		para (inteiro i = 0; i<quant_livros[0]; i++){
			escreva("Nome do livro: ")
			leia(CadLiv[i][0])
			escreva("Seção/Sub-seção: ")
			leia(CadLiv[i][1])
			escreva("Nome do autor: ")
			leia(CadLiv[i][2])
		}
		limpa()
		escreva("Cadastro efetuado.")
		voltarCadLiv()
		}
		senao se (quant_livros[0] != 0) {
			
		escreva("Insira quantidade de livros: ")
		leia(quant_livros[1])
		limpa()
		se (quant_livros[0] + quant_livros[1] > 10){
			escreva("O limite de cadastros foi atingido.\n")
			voltarMenu()
		}
		senao{
		
		escreva("____________________________\n\n")
		escreva("     CADASTRO DE LIVROS      \n")
		escreva("____________________________\n\n")

		para (inteiro i = quant_livros[0]; i<quant_livros[0] + quant_livros[1]; i++){
			escreva("Nome do livro: ")
			leia(CadLiv[i][0])
			escreva("Seção/Sub-seção: ")
			leia(CadLiv[i][1])
			escreva("Nome do autor: ")
			leia(CadLiv[i][2])
		}
		limpa()
		escreva("Cadastro efetuado.\n")
		voltarMenu()
		}
		}
	

	senao {
		escreva("Opção inválida.")
		voltarCadLiv()
		
	}
	}

//RETORNOS


	funcao voltarEmp()
	{
		inteiro voltarEmprestimo

		escreva("\nDeseja voltar ao empréstimo?\n\n1-Sim\n2-Não\n\nDigite a opção desejada: ")
          leia(voltarEmprestimo)
		 
		 se (voltarEmprestimo == 1){
                limpa()
               emprestimo()
            }
            se(voltarEmprestimo != 1 e voltarEmprestimo != 2){
            	limpa()
            	escreva ("Opção inválida, tente novamente.\t\n\n")
               voltarEmp()
            }
            senao {
                limpa()
                voltarMenu()
              
            }
	}
	
	funcao voltarDev()
	{
		inteiro voltarDevolucao
		
		escreva("\nDeseja voltar à devolução?\n\n1-Sim\n2-Não\n\nDigite a opção desejada: ")
		leia(voltarDevolucao)
		 
		  se (voltarDevolucao == 1){
                limpa()
               devolucao()
            }
            se(voltarDevolucao != 1 e voltarDevolucao != 2){
            	limpa()
            	escreva ("Opção inválida, tente novamente.\t\n\n")
               voltarDev()
           }
            senao {
                limpa()
                voltarMenu()
              
           }
	}

	funcao voltarRelatorio()
	{
		inteiro voltarCatalogo
		
		escreva("\n____________________________________\n")
		escreva("\nDeseja voltar aos relatórios?\n\n1-Sim\n2-Não\n\nDigite a opção desejada: ")
          leia(voltarCatalogo)
		 
		 se (voltarCatalogo == 1){
                limpa()
               relatorios()
            }
            se(voltarCatalogo != 1 e voltarCatalogo != 2){
            	limpa()
            	escreva ("Opção inválida, tente novamente.\t\n\n")
	      	voltarRelatorio()
            	
            }
            senao {
                limpa()
                voltarMenu()
              
            }
	}
	
	funcao voltaPesquisa(){

		inteiro novaP

		escreva("____________________________________\n")
		escreva("\nDeseja fazer uma nova pesquisa?\n\n1-Sim\n2-Não\n\nDigite a opção desejada: ")
		leia(novaP)
		limpa()
		
		se (novaP == 1) {
		limpa()
		pesquisa()	
		}
			
		senao se (novaP == 2) {
			voltarMenu()
		}

		senao {
			escreva ("Opção inválida!")
			
		limpa()
		pesquisa()
		}
}


	funcao voltarCat()
	{
		inteiro voltarCatalogo
		
		escreva("\n____________________________________\n")
		escreva("\nDeseja voltar ao catálogo?\n\n1-Sim\n2-Não\n\nDigite a opção desejada: ")
          leia(voltarCatalogo)
		 
		 se (voltarCatalogo == 1){
                limpa()
               catalogo()
            }
            se(voltarCatalogo != 1 e voltarCatalogo != 2){
            	limpa()
            	escreva ("Opção inválida, tente novamente.\t\n\n")
	      	voltarCat()
            	
            }
            senao {
                limpa()
                voltarMenu()
              
            }
	}


	funcao voltarCadLiv()
	{
		inteiro voltarCadastroLivros
		
		escreva("\n____________________________________\n")
		escreva("\nDeseja voltar ao cadastro de livros?\n\n1-Sim\n2-Não\n\nDigite a opção desejada: ")
		leia(voltarCadastroLivros)
		 
		 se (voltarCadastroLivros == 1){
                limpa()
               cadastroLivro()
            }
            se(voltarCadastroLivros != 1 e voltarCadastroLivros != 2){
            	limpa()
            	escreva ("Opção inválida, tente novamente.\t\n\n")
               voltarCadLiv()
            	
           }
            senao {
                limpa()
                voltarMenu()
              
          }
	}

	funcao voltarMenu(){
       
       inteiro voltarM

          escreva("Deseja voltar ao menu inicial?\n\n1-Sim\n2-Não\n\nDigite a opção desejada: ")
		leia(voltarM)
		 
		 se (voltarM == 1){
                escreva("Voltando ao menu.\n")
       	 enquanto (tempo_i<=tempo_f){
            limpa()
            escreva (tempo_i)
            Util.aguarde(1000)
            tempo_i++
        }
        limpa()
        inicio()

            }
            se(voltarM != 1 e voltarM != 2){
            	limpa()
            	escreva ("Opção inválida, tente novamente.\t\n\n")
               voltarMenu()
            	
           }
            senao {
                limpa()
                escreva("Até a próxima!\n")
              
          }
        
    }    

    funcao finalizar(){
    	escreva("Até a próxima!\n")
    }
	
}

